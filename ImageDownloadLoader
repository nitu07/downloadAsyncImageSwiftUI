import SwiftUI
import Combine

class ImageDownloadLoader {
    
    let url = URL(string: "https://picsum.photos/200")!
    
    
    func handleResponse(data: Data?, response: URLResponse?) -> UIImage? {
        
        guard let data = data, let image = UIImage(data: data) ,let response = response as? HTTPURLResponse, response.statusCode >= 200 && response.statusCode < 300 else {
            return nil
        }
        return image
    }
    
    func downloadImageFromSession(completion: @escaping(_ image: UIImage?, _ error: Error?) -> Void) {
        
        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            let image =  self?.handleResponse(data: data, response: response)
            completion(image, error)
        }.resume()
    }
    
    func downloadWithCombine() -> AnyPublisher<UIImage?, Error> {
        URLSession.shared.dataTaskPublisher(for: url)
            .tryMap(handleResponse)
            .mapError({$0})
            .eraseToAnyPublisher()
        
    }
    
    func downloadAsyncImage() async throws -> UIImage? {
        do {
            let (data, response) =   try await URLSession.shared.data(from: url, delegate: nil)
            return (handleResponse(data: data, response: response))
        } catch {
            throw error
        }
    }
    
}
    class ImageDownloadViewModel: ObservableObject {
        
        @Published var iMAGE: UIImage? = nil
        let loader = ImageDownloadLoader()
        var cancelable = Set<AnyCancellable>()
        func fetchImage() async {
            
            //        loader.downloadImageFromSession { [weak self] image, error in
            //            DispatchQueue.main.async {
            //                self?.iMAGE = image
            //            }
            //        }
            
            /*
             loader.downloadWithCombine()
             .receive(on: DispatchQueue.main)
             .sink { _ in
             
             } receiveValue: { [weak self] image in
             self?.iMAGE = image
             }
             .store(in: &cancelable)
             */
            
            let image = try? await loader.downloadAsyncImage()
            await MainActor.run {
                self.iMAGE = image
            }
            
        }
    }
    
    struct ImageDownloadUiView: View {
        
        
        @StateObject private var viewModel = ImageDownloadViewModel()
        
        var body: some View {
            ZStack {
                
                if let image = viewModel.iMAGE {
                    Image(uiImage: image)
                        .resizable()
                        .scaledToFit()
                        .frame(width: 250, height: 250)
                        .background(Color.blue)
                }
            }
            .onAppear {
                Task {
                    await viewModel.fetchImage()
                }
            }
            
        }
    }
    
    struct ImageDownloadUiView_Previews: PreviewProvider {
        static var previews: some View {
            ImageDownloadUiView()
        }
    }
